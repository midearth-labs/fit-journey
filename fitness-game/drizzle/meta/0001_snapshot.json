{
  "id": "acb4816d-09f8-45c2-a33a-c967c7d029c8",
  "prevId": "7090cf69-f261-4d52-9bcf-cd34b81241e3",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.answer_reactions": {
      "name": "answer_reactions",
      "schema": "",
      "columns": {
        "answer_id": {
          "name": "answer_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "reaction_type": {
          "name": "reaction_type",
          "type": "reaction_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "answer_reactions_answer_index": {
          "name": "answer_reactions_answer_index",
          "columns": [
            {
              "expression": "answer_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "answer_reactions_answer_id_question_answers_id_fk": {
          "name": "answer_reactions_answer_id_question_answers_id_fk",
          "tableFrom": "answer_reactions",
          "columnsFrom": [
            "answer_id"
          ],
          "tableTo": "question_answers",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        },
        "answer_reactions_user_id_users_id_fk": {
          "name": "answer_reactions_user_id_users_id_fk",
          "tableFrom": "answer_reactions",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {
        "answer_reactions_answer_id_user_id_pk": {
          "name": "answer_reactions_answer_id_user_id_pk",
          "columns": [
            "answer_id",
            "user_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.progress_shares": {
      "name": "progress_shares",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "share_type": {
          "name": "share_type",
          "type": "share_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "share_type_id": {
          "name": "share_type_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "content_version": {
          "name": "content_version",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "generated_content": {
          "name": "generated_content",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "include_invite_link": {
          "name": "include_invite_link",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "share_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "clap_count": {
          "name": "clap_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "muscle_count": {
          "name": "muscle_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "party_count": {
          "name": "party_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "progress_shares_user_index": {
          "name": "progress_shares_user_index",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        },
        "progress_shares_type_status_index": {
          "name": "progress_shares_type_status_index",
          "columns": [
            {
              "expression": "share_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        },
        "progress_shares_type_id_index": {
          "name": "progress_shares_type_id_index",
          "columns": [
            {
              "expression": "share_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "share_type_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        },
        "progress_shares_recent_active_index": {
          "name": "progress_shares_recent_active_index",
          "columns": [
            {
              "expression": "share_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "where": "\"progress_shares\".\"status\" = 'active' AND \"progress_shares\".\"is_public\" = true AND \"progress_shares\".\"created_at\" >= NOW() - INTERVAL '$1'",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "progress_shares_user_id_users_id_fk": {
          "name": "progress_shares_user_id_users_id_fk",
          "tableFrom": "progress_shares",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.question_answers": {
      "name": "question_answers",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "question_id": {
          "name": "question_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "answer": {
          "name": "answer",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "is_anonymous": {
          "name": "is_anonymous",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "answer_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "moderation_notes": {
          "name": "moderation_notes",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "helpful_count": {
          "name": "helpful_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "not_helpful_count": {
          "name": "not_helpful_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "question_answers_question_index": {
          "name": "question_answers_question_index",
          "columns": [
            {
              "expression": "question_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        },
        "question_answers_approved_index": {
          "name": "question_answers_approved_index",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "where": "\"question_answers\".\"status\" = 'approved'",
          "concurrently": true
        },
        "question_answers_user_index": {
          "name": "question_answers_user_index",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "question_answers_question_id_questions_id_fk": {
          "name": "question_answers_question_id_questions_id_fk",
          "tableFrom": "question_answers",
          "columnsFrom": [
            "question_id"
          ],
          "tableTo": "questions",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        },
        "question_answers_user_id_users_id_fk": {
          "name": "question_answers_user_id_users_id_fk",
          "tableFrom": "question_answers",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.question_articles": {
      "name": "question_articles",
      "schema": "",
      "columns": {
        "question_id": {
          "name": "question_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "article_id": {
          "name": "article_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "question_articles_question_index": {
          "name": "question_articles_question_index",
          "columns": [
            {
              "expression": "question_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        },
        "question_articles_article_index": {
          "name": "question_articles_article_index",
          "columns": [
            {
              "expression": "article_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "question_articles_question_id_questions_id_fk": {
          "name": "question_articles_question_id_questions_id_fk",
          "tableFrom": "question_articles",
          "columnsFrom": [
            "question_id"
          ],
          "tableTo": "questions",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {
        "question_articles_question_id_article_id_pk": {
          "name": "question_articles_question_id_article_id_pk",
          "columns": [
            "question_id",
            "article_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.question_reactions": {
      "name": "question_reactions",
      "schema": "",
      "columns": {
        "question_id": {
          "name": "question_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "reaction_type": {
          "name": "reaction_type",
          "type": "reaction_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "question_reactions_question_index": {
          "name": "question_reactions_question_index",
          "columns": [
            {
              "expression": "question_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "question_reactions_question_id_questions_id_fk": {
          "name": "question_reactions_question_id_questions_id_fk",
          "tableFrom": "question_reactions",
          "columnsFrom": [
            "question_id"
          ],
          "tableTo": "questions",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        },
        "question_reactions_user_id_users_id_fk": {
          "name": "question_reactions_user_id_users_id_fk",
          "tableFrom": "question_reactions",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {
        "question_reactions_question_id_user_id_pk": {
          "name": "question_reactions_question_id_user_id_pk",
          "columns": [
            "question_id",
            "user_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.questions": {
      "name": "questions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "body": {
          "name": "body",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "is_anonymous": {
          "name": "is_anonymous",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "question_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "moderation_notes": {
          "name": "moderation_notes",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "helpful_count": {
          "name": "helpful_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "not_helpful_count": {
          "name": "not_helpful_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "questions_status_index": {
          "name": "questions_status_index",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        },
        "questions_approved_index": {
          "name": "questions_approved_index",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "where": "\"questions\".\"status\" = 'approved'",
          "concurrently": true
        },
        "questions_user_index": {
          "name": "questions_user_index",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "questions_user_id_users_id_fk": {
          "name": "questions_user_id_users_id_fk",
          "tableFrom": "questions",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_challenge_progress": {
      "name": "user_challenge_progress",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_challenge_id": {
          "name": "user_challenge_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "knowledge_base_id": {
          "name": "knowledge_base_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "all_correct_answers": {
          "name": "all_correct_answers",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true
        },
        "quiz_answers": {
          "name": "quiz_answers",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "first_attempted_at": {
          "name": "first_attempted_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "last_attempted_at": {
          "name": "last_attempted_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "attempts": {
          "name": "attempts",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_challenge_progress_user_id_users_id_fk": {
          "name": "user_challenge_progress_user_id_users_id_fk",
          "tableFrom": "user_challenge_progress",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        },
        "user_challenge_progress_user_challenge_id_user_challenges_id_fk": {
          "name": "user_challenge_progress_user_challenge_id_user_challenges_id_fk",
          "tableFrom": "user_challenge_progress",
          "columnsFrom": [
            "user_challenge_id"
          ],
          "tableTo": "user_challenges",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "user_challenge_article_unique": {
          "name": "user_challenge_article_unique",
          "columns": [
            "user_challenge_id",
            "knowledge_base_id"
          ],
          "nullsNotDistinct": false
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_challenges": {
      "name": "user_challenges",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "challenge_id": {
          "name": "challenge_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "start_date": {
          "name": "start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "original_start_date": {
          "name": "original_start_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "user_challenge_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "knowledge_base_completed_count": {
          "name": "knowledge_base_completed_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "daily_log_count": {
          "name": "daily_log_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "last_activity_date": {
          "name": "last_activity_date",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "user_challenge_status_start_date_not_locked_inactive_index": {
          "name": "user_challenge_status_start_date_not_locked_inactive_index",
          "columns": [
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "start_date",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "where": "\"user_challenges\".\"status\" NOT IN ('locked', 'inactive')",
          "concurrently": true
        },
        "user_challenge_unique_active_index": {
          "name": "user_challenge_unique_active_index",
          "columns": [
            {
              "expression": "user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "challenge_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "with": {},
          "method": "btree",
          "where": "\"user_challenges\".\"status\" NOT IN ('locked', 'inactive')",
          "concurrently": true
        }
      },
      "foreignKeys": {
        "user_challenges_user_id_users_id_fk": {
          "name": "user_challenges_user_id_users_id_fk",
          "tableFrom": "user_challenges",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_logs": {
      "name": "user_logs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "log_key": {
          "name": "log_key",
          "type": "all_log_keys",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "log_value": {
          "name": "log_value",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "log_date": {
          "name": "log_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_logs_user_id_users_id_fk": {
          "name": "user_logs_user_id_users_id_fk",
          "tableFrom": "user_logs",
          "columnsFrom": [
            "user_id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "user_daily_log_unique": {
          "name": "user_daily_log_unique",
          "columns": [
            "user_id",
            "log_date",
            "log_key"
          ],
          "nullsNotDistinct": false
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_metadata": {
      "name": "user_metadata",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "enabled_features": {
          "name": "enabled_features",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "current_fitness_level": {
          "name": "current_fitness_level",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "current_streak_ids": {
          "name": "current_streak_ids",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "longest_streaks": {
          "name": "longest_streaks",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "last_activity_date": {
          "name": "last_activity_date",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_metadata_id_users_id_fk": {
          "name": "user_metadata_id_users_id_fk",
          "tableFrom": "user_metadata",
          "columnsFrom": [
            "id"
          ],
          "tableTo": "users",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "no action",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "display_name": {
          "name": "display_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_gender": {
          "name": "avatar_gender",
          "type": "avatar_gender",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_age_range": {
          "name": "avatar_age_range",
          "type": "avatar_age_range",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": false
        },
        "personalization_country_codes": {
          "name": "personalization_country_codes",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "timezone": {
          "name": "timezone",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "preferred_reminder_time": {
          "name": "preferred_reminder_time",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "notification_preferences": {
          "name": "notification_preferences",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "invitation_code": {
          "name": "invitation_code",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "invitation_join_count": {
          "name": "invitation_join_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "inviter_code": {
          "name": "inviter_code",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_email_unique": {
          "name": "users_email_unique",
          "columns": [
            "email"
          ],
          "nullsNotDistinct": false
        },
        "users_invitation_code_unique": {
          "name": "users_invitation_code_unique",
          "columns": [
            "invitation_code"
          ],
          "nullsNotDistinct": false
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.all_log_keys": {
      "name": "all_log_keys",
      "schema": "public",
      "values": [
        "dailyMovement",
        "cleanEating",
        "sleepQuality",
        "hydration"
      ]
    },
    "public.answer_status": {
      "name": "answer_status",
      "schema": "public",
      "values": [
        "pending",
        "approved",
        "rejected",
        "hidden"
      ]
    },
    "public.avatar_age_range": {
      "name": "avatar_age_range",
      "schema": "public",
      "values": [
        "child",
        "teen",
        "young-adult",
        "middle-age",
        "senior"
      ]
    },
    "public.avatar_gender": {
      "name": "avatar_gender",
      "schema": "public",
      "values": [
        "male",
        "female"
      ]
    },
    "public.emoji_reaction_type": {
      "name": "emoji_reaction_type",
      "schema": "public",
      "values": [
        "clap",
        "muscle",
        "party"
      ]
    },
    "public.question_status": {
      "name": "question_status",
      "schema": "public",
      "values": [
        "pending",
        "approved",
        "rejected",
        "hidden"
      ]
    },
    "public.reaction_type": {
      "name": "reaction_type",
      "schema": "public",
      "values": [
        "helpful",
        "not_helpful"
      ]
    },
    "public.share_status": {
      "name": "share_status",
      "schema": "public",
      "values": [
        "active",
        "hidden"
      ]
    },
    "public.share_type": {
      "name": "share_type",
      "schema": "public",
      "values": [
        "challenge_completion",
        "avatar_progression",
        "quiz_achievement",
        "invitation_count"
      ]
    },
    "public.user_challenge_status": {
      "name": "user_challenge_status",
      "schema": "public",
      "values": [
        "not_started",
        "active",
        "completed",
        "locked",
        "inactive"
      ]
    }
  },
  "schemas": {},
  "views": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}